import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
  id 'groovy'
  id 'java-library'
  id 'signing'
  id 'maven-publish'
  id("se.alipsa.nexus-release-plugin") version '2.0.0'
  id "com.github.ben-manes.versions" version "0.53.0"
}

group = 'se.alipsa.groovy'
version = '2.0.4-SNAPSHOT'
description = 'Extensions to Groovy SQL'

repositories {
  if (version.contains('SNAPSHOT')) {
    mavenLocal()
  }
  mavenCentral()
}

dependencies {
  def groovyVersion = "5.0.2"
  // By using compileOnly instead of implementation, the jar will not be available at runtime
  // and hence users can use whatever compatible version of Groovy that they want
  compileOnly "org.apache.groovy:groovy:${groovyVersion}"
  compileOnly "org.apache.groovy:groovy-sql:${groovyVersion}"
  //implementation 'org.apache.logging.log4j:log4j-api:2.23.1'

  testImplementation 'org.junit.jupiter:junit-jupiter:6.0.0'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher:6.0.0'
  testImplementation 'com.h2database:h2:2.4.240'
  testImplementation "org.apache.groovy:groovy:${groovyVersion}"
  testImplementation "org.apache.groovy:groovy-sql:${groovyVersion}"
}

compileJava {
  options.release = 21
  options.deprecation = true
  options.compilerArgs << "-Xlint:unchecked"
}

compileGroovy {
  options.deprecation = true
}

test {
  testLogging.showStandardStreams = true

  useJUnitPlatform()
  testLogging {
    // set options for log level LIFECYCLE
    events TestLogEvent.FAILED,
        TestLogEvent.PASSED,
        TestLogEvent.SKIPPED,
        TestLogEvent.STANDARD_OUT
    exceptionFormat TestExceptionFormat.FULL
    showExceptions true
    showCauses true
    showStackTraces true

    // set options for log level DEBUG and INFO
    debug {
      events TestLogEvent.STARTED,
          TestLogEvent.FAILED,
          TestLogEvent.PASSED,
          TestLogEvent.SKIPPED,
          TestLogEvent.STANDARD_ERROR,
          TestLogEvent.STANDARD_OUT
      exceptionFormat TestExceptionFormat.FULL
    }
    info.events = debug.events
    info.exceptionFormat = debug.exceptionFormat

    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        def repeatLength = startItem.length() + output.length() + endItem.length()
        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
      }
    }
  }
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
  archiveClassifier.set 'javadoc'
  from groovydoc.destinationDir
}


task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier.set 'sources'
  from sourceSets.main.allSource
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      artifact(javadocJar)
      artifact(sourcesJar)
      pom {
        name = 'Groovy Data Utils'
        description = "${project.description}"
        url = "https://github.com/Alipsa/data-utils"
        licenses {
          license {
            name = 'MIT License'
            url = 'https://raw.githubusercontent.com/Alipsa/data-utils/master/LICENSE'
          }
        }
        developers {
          developer {
            id = 'perNyfelt'
            name = 'Per Nyfelt'
          }
        }
        scm {
          url = 'https://github.com/Alipsa/data-utils/tree/master'
          connection = 'scm:git:https://github.com/Alipsa/data-utils.git'
          developerConnection = 'scm:git:https://github.com/Alipsa/data-utils.git'
        }
      }
    }
  }
  if (project.ext.properties.sonatypeUsername) {
    repositories {
      maven {
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
      }
    }
  }
}

signing {
  if (project.properties['signing.keyId'] != null) {
    project.logger.lifecycle("Signing artifacts...")
    sign publishing.publications.maven
  }
}

nexusReleasePlugin {
  userName = project.ext.properties.sonatypeUsername
  password = project.ext.properties.sonatypePassword
  mavenPublication = publishing.publications.maven
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}
// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
  gradleReleaseChannel = "current"
  resolutionStrategy {
    componentSelection {
      all {
        if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
          reject('Release candidate')
        }
      }
    }
  }
}
