import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'groovy'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id('io.github.gradle-nexus.publish-plugin') version '1.3.0'
    id "com.github.ben-manes.versions" version "0.46.0"
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    def groovyVersion = "[4.0.11, )"
    def tablesawVersion = "[0.43.1, )"
    // By using compileOnly instead of implementation, the jar will not be available at runtime
    // and hence users can use whatever compatible version of Groovy that they want
    compileOnly "org.apache.groovy:groovy:${groovyVersion}"
    compileOnly "org.apache.groovy:groovy-sql:${groovyVersion}"
    implementation("tech.tablesaw:tablesaw-core:${tablesawVersion}") {
        constraints {
            implementation "io.github.classgraph:classgraph:4.8.157"
            because "Fix CWE-611: Improper Restriction of XML External Entity Reference ('XXE')"
        }
        constraints {
            implementation "com.google.guava:guava:31.1-jre"
            because "Fix CWE-379: Creation of Temporary File in Directory with Incorrect Permissions"
        }
    }
    implementation "se.alipsa.groovy:matrix:1.1.1-SNAPSHOT"

    // for XlsxWriter, TODO: remove once contributed to tablesaw
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
    // for OdsReader and Writer, TODO: remove once contributed to tablesaw
    implementation 'com.github.miachm.sods:SODS:1.5.2'
    // for XmlReader and writer, TODO: remove once contributed to tablesaw
    implementation 'org.dom4j:dom4j:2.1.4'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'com.h2database:h2:2.1.214'
    testImplementation "org.slf4j:slf4j-simple:2.0.5"
    testImplementation "org.apache.groovy:groovy:${groovyVersion}"
    testImplementation "org.apache.groovy:groovy-sql:${groovyVersion}"
}

group = 'se.alipsa.groovy'
version = '1.0.4-SNAPSHOT'
description = 'Java FX GUI for Groovy based data science analysis and applications'


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

test {
    dependsOn cleanTest
    testLogging.showStandardStreams = true

    useJUnitPlatform()
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED,
            TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact(javadocJar)
            artifact(sourcesJar)
            pom {
                name = 'Groovy Data Utils'
                description = "${project.description}"
                url = "https://github.com/perNyfelt/data-utils"
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/perNyfelt/data-utils/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'perNyfelt'
                        name = 'Per Nyfelt'
                    }
                }
                scm {
                    url = 'https://github.com/perNyfelt/data-utils/tree/master'
                    connection = 'scm:git:https://github.com/perNyfelt/data-utils.git'
                    developerConnection = 'scm:git:https://github.com/perNyfelt/data-utils.git'
                }
            }
        }
    }
}

signing {
    if (project.properties['signing.keyId'] != null) {
        project.logger.lifecycle("Signing artifacts...")
        sign publishing.publications.maven
    } else {
        project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
    }
}
